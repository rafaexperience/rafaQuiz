rafaQuiz

Ejercicio Miriadax Curso 2
Desarrollo de servicios en la nube con HTML5, Javascript y node.js

Módulo 6 en adelante.

licencia:MIT

-------------------------------------------------------------------------------------------
Aquí haré un historial con todo lo que vaya haciendo y los problemas que me encuentre y (espero) sus soluciones
los problemas los marcare con *
-------------------------------------------------------------------------------------------
ANTES DE EMPEZAR.

    - Precedentes:

        Tuve algunos problemas haciendo la aplicación, y no se cuantos fallos arrastre, pues no siempre
        sabia lo que hacia, asi que decidi empezar de nuevo, controlándolo todo mejor, incluidos mensajes de error en heroku log.

        Por mencionar algunos problemas que tuve, por si le es util a alguien, o alguien vio este
        repositorio, dejo los fallos que encontré y como los solucione.

            *FALLOS VERSION ANTERIOR(ELIMINADA)

                CORREGIDOS

                    - Procfile tenia un caracter invisible por guardarlo como utf con dom. y hacia que foreman no ejecutase.
                    - models.js tenia repetido Quiz.create
                    - router/index.js repetia get author
                    - el favicon no salia - cambie formato de png a ico y ok
                    - En un momento dado subi la carpeta como Models y debia ser models.
                            No fui capaz de cambiarlo en windows ni con git mv Model model.
                            En local estaba ok, pero los cambios no los reconocia al subirlos a github
                        Consegui corregirlo haciendo el commit desde linux y subiendolo desde alli.
                        Hice un monton de commits de más intentandolo.
                    - 
                    - El dashboard de heroku siempre me decia que el dyno estaba sleepin y no cargaba, no se
                      si era porque no funcionaba o por el fallo de la página.
                       (Al subir la aplicación de nuevo (sin posgres, por ahora) funciona ok, asi que seria
                         fallo de aplicación - ver Quiz6).

                    - Tambien me daba un fallo segun heroku log al cargar /author,
	    			  Le habia puesto variable para titulo, como con index, y la pagina se creaba ok,
                   	  pero en heroku logs salia como que <%=title%>(en layout.ejs) no estaba definido
                        
                      Sin embargo con index no daba problemas y lo copie tal cual. Ademas cargaba ok
                      el titulo distinto cuando cargaba la página.
                       -- Tenia la direccion de los videos mal - video/.. en vez de videos/.. VER QUIZ 6+:


                SIN CORREGIR
                      - Estado: adaptado a heroku y funcionando en local.

                    - Al subir posgres dejo de funcionar en heroku. porque no encontraba models.
	                  Puede que fuera por lo de la carpeta Models y solo se arreglara en github
        	          y no en heroku.

                       

EMPEZANDO

        Uso normalmente windows 8.1 para programar con el entorno visual studio community.
        También Sublime o Code(o vsCode) para archivos individuales o por contrastar.
         En el Visual tengo añadido nodejs tools, ya instalé git bash y heroku.

        Tambien uso una máquina virtual debian desde el windows con hiper-v y un mini pc con linux poppy,
         con git y heroku también, para hacer cosas fuera de casa.
         
        En vs community hay varias plantillas para hacer aplicaciones con o sin express 3 o 4.
        En las transparencias de los módulos, recomiendan usar las versiones del curso y
        usan partials(con ejs) en lugar de jade(que es como viene en la plantilla),
        asi que en principio lo haré según el curso.
---------------------------------------------------------------------------------
QUIZ 1 CREACION DEL ESQUELETO.
	- Paso 1. Instalar paquete express-generator
		- Creo carpeta, inicio git(git init), creo proyecto para visual studio.
		- Instalo express-generator4.9.0 con npm install express-generator@4.9.0
			(no creo carpeta nueva, para que solo haya un node_modules, 
			como generator no esta en package, no se considera parte de la aplicacion y no se instalara con npm install)
		- Ejecuto express (con path) - se crean app.js,package.json y carpetas segun transparencia

	- Paso 2. Generar esqueleto del proyecto Quiz
		- Instalo paquetes de package.json agregados con express (npm install)
		- Añado .gitignore e incluyo archivos de visual y carpeta node_modules
		- Añado README.md, LICENCE (MIT) y este archivo (notas.txt) QUE IRE ACTUALIZANDO CON CADA COMMIT
	- Paso 3. Guardar versión (commit) con git
        -* Hago git add . para añadir los archivos y me avisa que varios archivos se guardaran en git con 
            otro fin de linea CRLF, pero se mantendran en mi carpeta.
            Compruebo archivos, varios estan con Europeo occidental (windows)-pagina de codigos 1252
            y fin de linea windows CRLF.
            según investigo, es normal, para poder trabajar desde distintos SSOO
            Los cambio todos a Unicode(UTF-8-sin signatura) de todos modos
        - Ejecuto con npm start y funciona ok en http://localhost:3000/ -- > página express
        - Añado comentarios a todos los archivos de código para indicar que hacen  
           y a mensajes de error, para saber de donde vienen.     
        - commit -m "Esqueleto del proyecto rafaquiz con express-generator" ok

QUIZ 2 PRIMERA PAGINA Y FAVICON

    - Paso 1. Se transforma la página de entrada GET/, en página bienvenida del portal.
        - Modifico routes/index.js. Cambio el valor de la variable title de "Express" a "RafaQuiz"
    - Paso 2. Quitamos ruta /users
        - Elimino ruta users - modifico app.js (var=require y use) y borro archivo routes/users.ejs 
    - Paso 3. Añadimos favicon
        - Para añadir favicon, uso el método desde la cabecera de la página.
        - Elimino modulo de serve-favicon en package.json, borro la carpeta en node_modules y quito referencias de app.js
        - Creo icono con paint.net le cambio el tamaño y lo guardo como bmp. Luego le cambio la extension a ico.
        - Guardo icono en public/images
        - Añado <link rel="icon" href="\images\logoQuiz.ico" type="image/x-icon" /> en head de index.ejs
        - Todo ok - solo mensajes get en consola y sale titulo cambiado e icono en http://localhost:3000/
            * puede que al enviar el css se repita el envio?? - no lo considero problema, pero es curioso.
    - Paso 4. Guardamos versión
        - git add . .Tuve que borrar routes/users.js con git rm routes/users.js para que lo registrase
        - todo ok- git commit -m "Primera página y favicon."
            ok.
            
QUIZ 3 PRIMERA PREGUNTA

    -Paso 1. Añadir MVC de pregunta y respuesta
        a:Crear directorio controllers/ y el archivo controllers/quiz_controller.js
            -Pues eso. Mas detalles en el código.
        b:Importar controllers/quiz_controller.js en routes/index.js
        c:Introducir nuevas rutas en el enrutador routes/index.js: (GET /quizes/question) y (GET /quizes/answer)
            - Lo mismo. Mas detalles en codigo
        d:Crear directorio views/quizes con las vistas question.ejs y answer.ejs
            - Aqui le añado algunas etiquetas a mayores, tanto aqui como en index.ejs 
    -Paso 2. Añadimos enlace a la pregunta en pagina home.
            - *Sale mal signo admiración, corrigo todas las codificaciones de los archivos nuevos. -- solucionado
            - *Compruebo que funciona y el favicon solo sale en la principal - Puse direcc. con \ en vez de / -- solucionado
            - todo funciona ok. 
    -Paso 3. Guardamos versión.
            - todo ok- git commit -m "Primera pregunta."

QUIZ 4 MARCO DE LA APLICACION
    
    - Paso 1. Instalar express-partials
        - Instalamos npm install express-partials@0.3.0 --save
            Se incluye en package.json ok
    - Paso 2. Aplicar express-partials a app.js
        - Añado require y app.use de partials a app.js
    - Paso 3. Añadir marco con <header>, <nav>, <section> y <footer>
        - creamos el marco layout.ejs en views. Copio el HEAD de index y modifico el titulo - la variable que se le pasa
        - la variable <%- body &> en <section> es la que tiene el contenido de las otras páginas
    - Paso 4. Modificar vistas para que salgan en <section>
        - Borramos <head> y demas del resto de las vistas. index.ejs views/question.ejs y views/answer.ejs
        - Todo responde ok. reviso codificacion utf y grabo de nuevo error.ejs y layout.ejs
    - Paso 5. Guardar versión.
        - - todo ok- git commit -m "Vistas parciales y marco"

QUIZ 4 DISEÑO WEB ADAPTABLE
    - Aqui me salto el ejercicio y le pongo el mismo marco que le puse al curso anterior.
    - Tiene un home a los ejercicios del curso anterior en un servidor gratuito. Se lo incluyo. 
-----------------PENDIENTE AÑADIR ENLACE A GITHUB EN  http://www.rafaexperience.comocreartuweb.es/----------------------------------
    - Se adapta bastante bien, aunque hay detalles.
            -* En pantalla grande el footer no queda abajo (tiene un tamaño minimo, pero en pantallas grandes queda vacio por abajo)
            -* En pantalla movil. la marca --Diseño Movil--, añadida con css(after), no queda centrada.
            -* Las preguntas y respuestas salen cutres, pero como va cambiar el sistema ( mas preguntas, comentarios), no lo toco.
------------------------------------------------------------------------------------------------------------------------------------
    - Resto ok - Pide los recursos ok, responden los enlaces ok y no veo errores de formato (tildes, o caractéres raros)
    - git add. añade todo, menos el stylesheet.css original, que se borro. uso git rm <archivo> y ok
    - aceptamos barco y guardamos. git commit -m "CSS adaptable a móviles y PC´s"

QUIZ 6: DESPLIEGUE EN HEROKU
    - Elimino la versión subida ( con posgrest ) que no funciona
        Siempre ponia sleepin.
        Voy al heroku dashboard y desde settings(abajo de todo) marco delete app..
    - Le añado el remoto de heroku desde git: heroku git:remote -a rafaquiz
    - y actualizo git push heroku master
    - funciona ok en https://rafaquiz.herokuapp.com/.
    - No añadi Procfile ni cambie package.json y funciona ok en heroku. Según dasboard, ejecuta como: web npm start.
         Ya no esta sleepin, asi que supongo que era porque la aplicación estaba mal y
         no llegaba a ejecutarse, por eso  no "despertaba" el dyno.
    - Tambien clono el repositorio: git clone https://github.com/rafaexperience/rafaQuiz.git
         y configuro heroku en el portatil: heroku login
        Añado remoto heroku - git remote add heroku https://git.heroku.com/rafaquiz.git
        ya puedo hacer heroku logs., pero salen los datos muy confusos.
        Reviso documentación y con heroku logs --source app --tail, salen mejor y no pierde la conexion.
    -* Me fijo que el titulo de las páginas esta mal. Compruebo que está mal en las transparencias.
        Intento poner titulo segun página con routes/index.js o controllers/quiz_controller.js.
        (Esto me dio problemas en anterior version, con /author)
        -- rectifique el nombre de la variable <&title&> por <%= title %> y cerre algunas etiquetas con />
            -el titulo sale ok, pero veo que no sale el favicon, lo dejo como antes y sigue ko.
            - No sale la petición en logs, pruebo varias cosas y al cambiar el formato a png aparece ok. ¡¡¡???
            - Parece que ya funciona todo ok.
    - hago git commit --amend -m "CSS adaptable a móviles y PC´s" y Lo reenvio a heroku. (--amend es para añadirlo al commit hecho)
        git push heroku master -f (-f es para que lo suba, aunque el commit en remote(heroku) sea el mismo pero mas atrasado, fast-forwards)
        como el repositorio de heroku no esta pensado para ver los comentarios, no deberia haber problemas.
        De todos modos intentaré hacer un branch para las pruebas y poder subirlas sin afectar el original.
    - todo ok en heroku.
    - Añado Procfile y módifico package.json (Aunque no hacen falta si no hay variables de entorno)
    - Compruebo con foreman start- todo ok
    - git commit -m "Despliegue en la nube (HEROKU)"
    - git push origin master - - ko (por el commit modificado) - lo fuerzo con -f (fue hace poco, no creo que le importe a nadie) ok.
    - git push heroku master - ok (ya estaba forzado de antes); - heroku open 
    - todo ok. titulo segun pagina, favicon en todas y mensages del heroku logs correctos.

QUIZ 6+: (obl.) ENLACE A GITHUB Y /AUTHOR
    - EJERCICIO P2P Obligatorio
            - Crear repositorio en github desde 0, siguiendo las instrucciones.
                Lo que ya hicimos, va.
            - Crear rama créditos,y desde ella:
                Modificar servidor para añadir enlace en <footer> del marco (layout) que apunte al proyecto en github
                    - Modifico views/layout.ejs y le pongo imágenes a los enlaces, por lo mono.
                    - Creo branch créditos y commit desde ella.
                Modificar servidor para responder peticiones GET a /author y devuelva una vista
                 con los autores, su fotografia y un video. Añadir enlace en la barra de navegación a pagina de créditos=/author
                 Despues integrar los cambios con master y subirlo a github. Cuando este ok, a heroku.
                    - Añado linea en routes/index.js, que lo manda a quiz_controller.js (como quiz/question) que la monta a partir
                       de creditos.ejs    (supongo que los créditos se añaden desde bd, mas tarde, por ser varios)
                    - añado creditos.ejs
                    -** Compruebo y da error en variable title de layout.ejs (como en versión anterior)
                        pruebo a desviar con index directo a creditos con titulo - ko - sin titulo - ko - dejo como antes
                        pruebo a desviar con index a quiz_controller.question con titulo cambiado - ko--
                            curiosamente no puse el path a question y sigue dando error en variable title, asi que no tiene que ver.
                            (Se ve que tanto modulo confunde al programa) -- Luego vi que el problema era que no le pasaba title a layout.ejs + error.ejs
                        La pongo como al principio index.js ->quiz_controller.author->creditos.ejs con titulo. - ko
                        vacio creditos.ejs - ok¡¡ por aqui van los tiros.
                        En el path de los videos puse video/ en vez de videos/ (tanta guerra por eso.., en fin) -- solucionado
                        por cierto, el video mio es el mismo que puse en el curriculum del curso anterior, por eso no tiene mucho sentido
                    - ahora todo ok en local - salen videos, favicon, enlaces,... podrian estar mejor encuadrados, pero vale
                    - git commit -m "Añadida página créditos GET /author y enlaces". desde rama(branch) créditos.
                    -  push a github desde creditos - ok;  -push heroku desde creditos ok
                    -* La página sigue siendo la de master. Conecto heroku con github en Deploy y cambio para que despliegue créditos
                         Automatic deploys from créditos are enabled ok - pero sigue mostrando la rama master al aplicar
                         Pruebo con Manual deploy un poco mas abajo, selecciono créditos y marco Deploy Branch y sale como se
                         actualiza. -- solucionado
                     - La pruebo y esta ok - aunque veo una raya de enlace por fuera del enlace a wikipedia - corrigo enlace
                     - subo todo y actualizo con Manual deploy ( en heroku dasboard ) - perfecto.
                     - vuelvo a master y hago merge. Me añade todos los 3 commits nuevos de créditos en master - no es como lo queria.
                     - Como master no esta subido voy a juntar los 3 commits en uno. Uso git reset --soft HEAD~3 ,para volver 3
                        commits atras sin que se borre nada. git status para confirmar que todo esta listo - ok
                        foreman start por si acaso - ok. hago commit normal con mensaje "Ejer. modulo6 - ...."
                    - Todo ok push heroku master y push origin master. cambio el Manual deploy de heroku a master. todo ok

MODULO 7
--------
QUIZ 7 LAS BASES DE DATOS

        -Paso1. Sequelize y SQLite3
            instalamos paquetes:
                npm install sequelize@1.7.0 se instala ok, pero tenia fallos de seguridad- elimino de package.json y paso a v3
                npm install sqlite3 da errores y no se instala - no compatible con version de npm y node
                - Me voy a ultimas versiones de ambos (instalo sin poner version) sequelize=^3.5.1 sqlite=^3.0.9
                    ~0.8.0 :significa >= 0.8.0 < 0.9.0.
                    ^0.8.0:significa >=0.7.0 < 1.0.0. 
                    cambiadas ok en package.json
        -Paso2 Definimos modelo (estructura de la tabla de la bd)
            Creamos carpeta models y dentro archivo quiz.js con sequelize.define
            Añadimos models.js en models/ que contruye bd segun el modelo importado y se conecta. 
             Tambien añade datos si esta vacia.
        -Paso3. El controlador
            añadimos al controlador quiz_controller el acceso a quiz.sqlite (Quiz en models.js- > models.Quiz)
        - corrigo un par de errores sintacticos y todo ok con foreman start
        - añado quiz.sqlite a .gitignore. git add . y git commit -m "La base de datos: sequelize.js y SQLite"
                - Por cierto, puedo ver el contenido directamente en quiz.sqlite con un plugin de firefox: sqlite manager

QUIZ 8 DESPLIEGUE DB EN HEROKU (POSTGRES)
        
        -Paso 1 y 2 Añadimos Postgresql a despliegue en heroku (segun pagina addons heroku):
            heroku addons:create heroku-postgresql:hobby-dev
            ok. segun instalacion esta vacia, reinicio la app y configuro la variable DATABASE_URL
            confirmo en heroku dashboard - ok rafaquiz :: database :: knitting-purposefully-2052 y en settings DATABASE_URL OK
        -Paso 3. Modificamos package.json - añadimos devDependencies para modo local con sqlite3 (borramos sqlite3 de dependencies)
        -Paso 4. Instalo posgresql ok pero aun no pghstore..(hasta que sepa para que..en pagina postgres con heroku no sale) - ok en package.json
        -Paso 5. Añado variables de entorno. .env (ahora si es obligatorio usar foreman start).
        -Paso 6. Adaptar models.js a postgres - ok
        -Paso 7,8. Comprobamos que funciona en local con foreman - http://localhost:5000/ perfecto y sin mensajes raros
                Borramos rama créditos (ya mezclada) y creamos una para subir las pruebas y no meter commits de mas.
                git branch -d créditos; git checkout -b pruebas; push heroku pruebas y cambiamos en dashboard Manual deploy - no sale pruebas - sigue créditos
                    Primero hay que pasar la rama a github, y desde el heroku dashboard se selecciona la rama; push origin pruebas .. y manual deploy - ok
                    -* Comprobamos pagina - ko -Aplication Error - hacemos heroku log --source app --tail :  fallo con el dialecto y no encuentra modulo pg-hstore.
                        lo instalamos con --save - añadido en package.json ok - commit nuevo en pruebas; git push origin pruebas ok y en heroku manual
                         deploy - añade modulo ok- ; Probamos - sigue ko - ya no sale error pg-hstore, pero sigue the dialect postgres is not supported.
                          (install pg module manually) reviso package y no esta pg ( no debi poner --save) reinstalo
                          y subo de nuevo, actualizo en heroku, y probamoos -- ok Ya funciona todo - reviso log de heroku - todo limpio.
                    - Paso los 3 commits de pruebas a master con merge. 

QUIZ 9 lISTA DE PREGUNTAS
       - Cambiamos una ruta cada vez.
       - Antes de nada cambiamos models.js para que cree las dos preguntas. Usamos bulkCreate para crear varias preguntas a la vez.
          Tambien cambio el mensaje para que indique que creo 2 preguntas. pruebo en local.
          Como ya hay una pregunta, no crea nada. borramos preguntas con plugin de firefox para manipular bd local, sqlite manager
          borramos todas las preguntas y reinicamos con foreman, ahora se crean ok
        --------PENDIENTE BORRAR DATOS EN BD HEROKU PARA CREAR 2 PREGUNTAS CUANDO ARRANQUE-----------
        - Creamos ruta GET quizes/ . (mostrara todas preguntas Primero añadimos ruta en routes/index.js para quizes/ que será manejada por quizController.index.
          Añadimos a quiz_controller el exports.index que montara la pagina con el objeto quizes(todos los campos de la bd) y el archivo  views/quizes/index.ejs. Tambien cambiamos el enlace de preguntas en <nav>, en layout.ejs. probamos local- todo correcto (solo sale listado de preguntas, que es lo que cambie)
        - lo subo a github desde branch pruebas para probar esta parte
           En heroku arranca bien, pero salen 3 preguntas (1 repetida), borramos la base de datos (heroku dashboard->base de datos->settings->reset)
           Ahora no arranca /quizes, home(/) sigue ok. Reiniciamos dyno para que la app se cargue entera. todo ok con 2 preguntas (con id 1 y 2)
        
        - Creamos ahora la ruta GET /quizes/(id pregunta) ( que mostrará la pregunta seleccionada). modificamos ruta /question en routes/index.js.
            en vez de /question ponemos /quizes/ con un parametro(quizId) que solo acepte numeros (\\d+) y la enviamos a quizController.show.
            Añadimos en archivo quiz_controller, exports.show, que será como /quizes/question, pero el parametro solo será una pregunta
            identificada por el id pasado, no un array con todas y marcando la primera, como antes.Se enviara el objeto entero 
            (será show.ejs quien coja la pregunta de quiz).
            Añadimos archivo views/quizes/show.ejs que sera un formulario (casi como el antiguo question.ejs) que mostrara la pregunta del 
            objeto que se le envio y enviara una peticion(action) a quiz/<param>/answer. con la misma id de ese objeto
            - Comprobamos en local - todo ok - subo a github desde pruebas (que esta conectado con heroku), despliego en heroku - todo ok

        - Falta la respuesta GET /quizes/(id pregunta)/answer (que indica si la respuesta coincide). Añadimos parametro ruta answer en routes/index.js.
            Modificamos quiz_controller para que reciba un solo objeto identificado, y monte la página con ese objeto y el archivo answer.ejs.
            Modificamos también answer.ejs para que cambie el enlace y vuelva a la pregunta que se respondió. pruebo y falla al enviar formulario
            * me da error de memoria. En la versión anterior me paso algo parecido y era por no cerrar bien una variable en un .ejs. reviso answer.ejs cambio $> por %>
             solucionado - pruebo varias preguntas. todo ok, salvo que vuelve a fallar favicon y enlace en views/index.ejs, en <HEAD> debajo del <h2> falla: va a quizes/question
             cambio enlace a quizes/ y dejo favicon por si funciona en heroku. Hacemos commit y enviamos a github desde pruebas. deploy pruebas en heroku - todo ok
        - Retoco un poco los css, de las preguntas y el menu
        - El metodo de arranque de la bd no es muy estable, pero es como esta en el ejercicio y a la lista de preguntas le vedria bien algun limite de cuandas pueden salir, pero paso
        - pruebo en foreman, todo ok - commit, push y pruebo en heroku - todo ok (efectivamente el favicon sale en heroku)
        - paso a master, organizo y envio a github

QUIZ 10 AUTOLOAD

    - OBJETIVO: GESTIONAR LA CARGA DEL OBJETO DE LA BASE DE DATOS DE UNA VEZ Y CONTROLANDO LOS ERRORES DE ACCESO.
   
        - Añadimos el autoload en las rutas (routes/index) antes de que se respondan a las rutas /quizes/... que iran a quizController.load(tambien actualizo algun comentario de codigo)
          Añadimos el gestor .load a quiz_controller que cargara el objeto y gestionará el error, si no lo encuentra. Tambien modificamos .answer y .show, para que no busquen en la bd
           y acepten req.quiz en su lugar, evitando hacer la busqueda dos veces. Comprobamos con foreman - Funciona perfecto
        - Enviamos desde pruebas a github, y desplegamos pruebas en heroku 
        -* responde ok con las preguntas que existen, pero si le pongo un id que no existe salta el dichoso error de la variable title is not defined y no carga el marco. 
           Reviso error.ejs, esta ok. Tras rastrear los errores y revisar el codigo (y mucho tiempo y lagrimas) me doy cuenta que la página de error esta en el 
           layout.ejs y este si que necesita variable title y no se la estoy pasando en ningun lado, porque en quiz_controller no hay ningun res.render("error,...")
           lo busco y lo localizo en app.js (de hecho hay dos, para produccion y desrrollo), Le añado el titulo con los datos del error. y el catch de index, que lo pase
           --SOLUCIONADO -y este error me ha confudido desde el principio (en vez de el error, me salia el error de la pagina de error, que mundo..) el favicon sigue sin salir en local
            segun foreman ni siquiera lo pide. Le añado los dos enlaces favicon (.ico y .png). En local funciona. Retoco tambien los enlaces de <nav> para que cambien al pasar el raton.
            -- todo ok en foreman. paso a github/heroku(pruebas) en heroku tambien - envio a master y paso commits a 1 con reset
                en local pide los dos iconos 2 veces, pero funciona. En heroku, solo lo pide uno (ico)

QUIZ 10+ EJ. OBLIGATORIO FORMULARIO EN /quizes/index
    
        - Enunciado:
            Añadir un formulario en quizes/index 
                - Crear en rama(branch) busquedas 
                - con un campo para introducir texto a buscar 
                - con boton enviar
                - El resultado devolvera la lista de preguntas que contengan el texto, por orden alfabetico
                - mezclar con rama master
                
         -Pistas
                - ruta con query GET /quizes?search=texto_a_buscar
                - formulario tipo GET y envia parametro search con string
                    Ej buscar: italia, -->GET /quizes?search=italia.
                 - Modificar quiz_controller.index
                 - para buscar preguntas usar:
                    findAll({where: ["pregunta like ?".search]}) - revisar signos
                 - delimitar search con % antes y despues y sustituir espacios con %
                    Ej "uno dos" -->("%uno%dos%") buscará el texto tal cual

    - Añado formulario a views/quizes/index.ejs. Escribo de Italia y pide http://localhost:5000/quizes?search=de+Italia y devuelve /quizes de nuevo (lista de preguntas normal).
    - No tengo idea de sql, asi que voy a intentar filtrar directamente poniendo el texto directo en exports.index en quiz_controller.js.
       Cambio findAll() por findAll(({where:["pregunta like ?".search]})) .Devuelve error:   Object function search() { [native code] } has no method 'replace'
        Segun documentacion, http://docs.sequelizejs.com/en/latest/docs/querying/ , no parere ser asi, cambio por: findAll({where:{pregunta: {$like: "%Italia"}}})
         - sale ok pero no encuentra nada. Cambiamos.  findAll({where: {pregunta: {$like: '%Italia%'}}}) - funciona ok. Le añado otro texto '%de%Italia%' funciona ok.
     - Lo adapto para que lea la variable pasada req.query.search. y la convierta en el string del objeto pasado como filtro para sustituir objeto vacio= sin filtro. ver código quiz_controller.js
     - Lo de sustituir los espacios por % no parece hacer falta, introduzco "de Italia" y sale ok - solo pregunta Italia, aunque la otra tenga "de" también.
        Lo añado de todos modos, ya que lo pide, Transformo espacio en %, ya que bodyParser.urlencoded ya lo transforma de +(como sale en la url).
        Por cierto, creo que hace lo contrario porque si pongo "l ?" salen ambas, y no solo "portugal ?".
         Añado un par de console.log() para confirmar que la transformacion se hace ok - Compruebo con foreman start - todo ok - sin parametros, con ellos, y con 2, ok.
          envio a github, desde branch busquedas, y cambio rama en heroku - deploy -manual deploy a busquedas.
      - Todo ok - modifico console.log para indicar que muestran commit --amend y a master y git reset --soft <commit autoload> y commit, para ordenar
  
  -------------------------------------MODULO 8----------------------------------------------
  
  QUIZ 11 CREAR PREGUNTAS    
        OBJETIVO: Añadir enlace en /quizes a pagina con formulario par crear preguntas nuevas y guardarlas en db 
        
    - Añadimos la página que contendrá el formulario views/quizes/newquiz.ejs . Cambio el nombre de new a newquiz en todo (new es una palabra clave y no quiero problemas raros)
        Por alguna razon question.ejs sigue por ahi, la elimino. No tengo claro porque se añade el formulario por separado, salvo por probarlo, pero ya se hace con layout.ejs,
         asi que voy a hacerlo todo junto, es decir newquiz.ejs + _form.ejs --> newquiz.ejs.
    - Añadimos controlador-newquiz a quiz_controller.js. Cambio el nombre de la variable quiz a nquiz, porque no es parte de la db, todavia. También en newquiz.ejs y le añado el titulo, 
        para montar la página con layout.ejs.
    - Añadimos ruta a routes/index.js quizes/newquiz --> quizController.newquiz. Tambien añado la ruta de create.
    - Creo el enlace en views/quizes/index.ejs , para poder ver que todo funciona hasta aqui. Compruebo si llega al formulario
         -* falla - no encuentra el recurso. - nombres todos ok - anulo la ruta a create en routes/index - ok - llega ok al formulario -solucionado
          - modifico el formulario (muy alargado)  y tuneo un poco todo. Cambio tambien app.js y quito extended false de urlencoded
    - Empezamos con la respuesta al formulario. Quito comentario a  ruta quizes/create en routes/index.js. Añado a quiz_controller el controllador de create
        Probamos - ko 404 - Tras un rato, me doy cuenta que la ruta para create es post y yo puse router.get . Corrigo y todo ok- Se añaden preguntas ok en local
        Pruebo a volvera a poner app.js con urlencoded con extended false . se graban las preguntas y respuestas como null
    - Probamos en heroku. - ko graba preguntas como null - me olvide de volver a cambiarl app.js - modifico.
    - Ahora ok, pero acabo de recordar que el ejercicio del mod 7 tenia que mostrar las preguntas ordenadas. Intento añadirlo al commit adecuado 
        voy con checkout, añado commit con amend; no soy capaz me dice que cree otra rama.
    - Añado todo ahora - funciona ok en local, pero cuando ordena segun el formulario de busqueda, deja las minusculas para el final. 
    - paso a github y heroku
        
 QUIZ 12 VALIDACION DE ENTRADAS
        OBJETIVO: Introducir en app comprovaciones para evitar que los campos en la bd estén vacios
        
       - Añadimos validaciones en quiz.js, tambien le pongo notNull. (solo especifica los filtros, no los aplica)
       - Añadimos funcion validate en quiz_controller - create (ahora aplica los filtros en este control). Tambien añadimos el parametro error a los render.
           ?? Diria que habria que enviar errors solo a newquiz.ejs, ya que los otros van vacios, y no meterlo en layout.ejs, pero lo dejo como dice.
       - Añado a layout.ejs la parte de error, sin titulo, porque me parece que solo ocupa espacio
       - quiz controller answer seguia con el if que llevaba a dos render, en vez de gestionar el mensaje ( juraria que ya lo cambie, pero tanto commit me lia)
            Lo cambio, y le pongo el parametro de error. Tambien se lo añado a author, que no sale en transparencias.
       - Añado paremetro error a los otros archivos que tienen render. App.js  en errores y index.js en index
       - El css pongo lista errores en rojo.
       - Probamos - ko -  no graba respuesta vacia, pero no muestra el error. Añado console.log, Corfirma que entra bien, dato erroneo y pasa a no validado
           * logs no dan error. llega a POST /quizes/create. Reviso layout.ejs. Vale, toneteria, le puse errors.length ===0, quito el igual.
                Ahora sale mensaje, pero salen dos avisos: Warning "notNull" validation has been deprecated in favor of Schema based "allowNull" 
                Por lo que entiendo, hay conflicto entre el notNull y alguna configuracion de sequelize. quito notNull de models/quiz.js - solucionado
       - commit  y envio a github y compruebo en heroku. ok.
       
QUIZ 13 EDITAR PREGUNTAS
    OBJETIVO: Añadir botón para editar las preguntas existentes.
        
        - Instalo midware method-override v2.3.1) con save para package.json. Añado a app.js require y use.  
        - Añadimos las rutas GET /quizes/quizId/edit y PUT /quizes/update a routes/index.js. (Paso3b pone POST, pero creo que no es asi, se transforma en formulario).
        - Añadimos a los controladores de las rutas en quiz_controller.js - .edit y .update
        - Falta añadir edit.ejs, aqui iba a probar otra cosa. Como en su momento junte newquiz.ejs(=new.ejs en pdf) + _form.ejs en newquiz le cambiaba el nombre
            y le pasaba los cambios como parametros ( igual que title ), pero tambien cambia la etiqueta action en <form> y ya son muchas variables, asi que lo
            rehago como viene en las transparencias. con newquiz.ejs + _form.ejs y edit.ejs + _form.ejs. Tambien cambio la variable que llame 
            nquiz(por no estar confirmada como parte de la db) a quiz, porque ahora la pide _form.ejs. La cambio tanto en quiz_controller .newquiz como en .create.
        - Solo queda añadir enlace a tabla en views/quizes/index.ejs de boton edit
        -* comprobamos - no da errores, pero no edita. corrigo en quiz_controller update el paso de variables (me cole el body, 
            y pasaban los mismos datos que estaban guardados de autoload) - solucionado
        - Compruebo que se pueden crear preguntas nuevas ( por los cambios todos de variable y _form, etc) - funciona ok - todo parece correcto y sin mensajes
            extraños en log - commit y envio a github - todo ok
            
QUIZ 14 BORRAR PREGUNTAS
    OBJETIVO: OBJETIVO: Añadir botón para borrar las preguntas.
    
        - Añadimos enlace en views/quizes/index.ejs que realmente sera un formulario que envie el metodo delete, tras confirmación (gestionado en js embutido)
        - Añadimos a routes/index.js la direccion para DELETE, que reenviará a quiz_controller - destroy
        - Añadimos a quiz_controller la funcion destroy, que recogerá la petición delete, como lleva id, ya esta cargada por autoload.
            Tambien le pongo como parametro a la funcion principal de destroy (req, res,next) para que lo gestione el catch.
        - Probamos. todo perfecto - commit, github y heroku
             
QUIZ 14+ AÑADIR INDICE TEMATICO
    OBJETIVO: Añadir a cada pregunta un índice temático (Humanidades, Ocio, Ciencia, Tecnología o Otro). Hacer commit y pasar a github y heroku.
    PISTAS:  - añadir campo a modelo de db.
             - En formularios de creacion y edicion usar:
                     <select name="tema">
                         <option value="Otro" selected>Otro</option>
                         <option value="Humanidades">Humanidades</option>
                         ....
                     </select>
                         
        - Modificamos modelo models/quiz.js. Añadimos propiedad  tema (como pregunta o respuesta).
        - Cambiamos _form.ejs para incluir el menú extensible.
        - Básicamente recorro los archivos y cuando se menciona pregunta y respuesta, le añado tema con el mismo formato
        -* Probamos - Da error por no tener la columna tema en la bd. borro quiz.sqlite y reintento - arranca ok
            La otra opción puede que pasara por migration, pero borre la base de datos sin querer.
            modifico _form para añadirle la tilde de tecnología, que si habia puesto en quiz.js
            todo ok - Lo único que cuando edita una pregunta, en tema sale Otros, que es el selected. Probe con datalist
             pero no me convencio. Lo dejo asi por ahora
         Todo funciona, aunque se  puede mejorar el diseño.
         lo envio ya porque ya tuve que hacer la entrega del ejercicio antes de tiempo, aunque nadie lo corrigio aun
         
         pd Por cierto, esto lo pongo despues de enviarlo. Borre base de datos postgres  de heroku desde postgres.heroku.com
            en configuracion (boton arriba derecha y reset database)
            
   MEJORAS Y REPARACIONES (HECHAS EN BRANCH PRUEBAS):
         - Corrijo enlace de views index con href"/quizes/" a "quizes"  por corrección de  Jorge Marcial Álvarez Gago 
            Si se iba desde ahi y seleccionabas pregunta, te enviaba a quizes/quizes/(id) y fallaba. Se agradece.
         - El formulario _form no acepta el tema otros (sale aviso de bd-quiz.js). En formulario solo acepta "Otros" y en 
                definición (models/quiz.js) solo "Otros". Corrijo formulario para "Otros".
         - Cuando selecciona una pregunta en _form, no sale el tema que tiene guardada, sino la primera de la lista.
             Añado variable a quiz_controller para pasar como parametro a _form.ejs (al montar newquiz.ejs y editquiz.ejs) y 
             codigo embebido js con for para que salgan las opciónes segun este array y marque como selected la que coincida
             con req.quiz.tema. También ordeno los temas para que salgan en orden alfabetico, menos "otros" que irá al final.
         - Varios retoques html y css. De diseño y añado varios comentarios 
         
QUIZ 15 CREAR COMENTARIO
        OBJETIVO - Añadir tabla para comentarios y asignarlos sus campos a los campos de tabla quiz - 1 pregunta, varios comentarios.
                Añadir formulario para añadir comentario y que se vean con las preguntas.

		- Creo archivo comments.js en /models, el campo lo llamo comentarios, en vez de texto.
		- Indicamos path e importamos tabla en models.js. Conectamos con sync ambas tablas dentro de var sequelize
        
		      	-?? vsCode me saca un fallo por tener la variable Quiz como local y luego exportarla (o algo asi) el error es este:
                  individuals declarations in merged declarations Quiz must be all exported or all local
			      Como funciona ok, no lo voy a cambiar, pero puede ser porque el vsCode lo analiza javascript como typescript que 
                  es una versión mas estricta con los tipos y la estructura, por lo que entendí. En fin, pendiente de ver bien.
                -?? tambien podriamos hacer la relación entre tablas de forma manual ( creando el campo quizId en comments y guardando
                   los datos cuando sea). Pendiente de probar
		- Añadimos rutas a routes/index.js y el enlace (require) con el controlador comment_controller.
        - Creamos archivo en controllers, comment_controller, que gestionara las peticiones hechas
            básicamente si newcomment muestra el formulario y desde este manda los datos a create, que los valida y, segun esten ok,
            los graba o muestra la pagina del formulario con los errores.
        - Añadimos las vistas. 
            - Modificamos show.ejs para que muestre los comentarios asignados a cada pregunta
            - Añadimos carpeta views/comments y creamos archivo new.ejs para crear y añadir los comentarios
            - Añadimos a funcion AUTOLOAD el parametro para mostrar los comentarios relacionados. Como en vez de find(),
                 use findById(quizId), solo le añado el parametro include ( espero que no de guerra), de la siguente forma:
                 ...findById(quizId,{include:[{ model: models.Comment }]})...
            - borramos quiz.sqlite, para que se cree de nuevo(datos no coinciden) y probamos con foreman
               -* ko, no encuentra models/comments y es comment. Mal escrito en models.js. corregido, reintento
               -* ko, Comment.belongTo(Quiz) undefined is not a function. faltaba s belongsTo. corregido, reintento
               -*  Ahora Se inicializo la bd ok. pruebo en navegador. Hace un extraño, al principio de la página se carga el 
                   archivo añadido(.ejs interno), aunque lo carga tambien en su sitio, en todas las paginas. reviso index.ejs
                   Le añadi un comentario: <!--MARCO DE TODAS LAS PÁGINAS - SE AÑADIRAN A <%- body %> (MUESTRA ERRORES SI LOS HAY)-->
                    y parece que lee la variable, pese a estar entre cometarios, le pongo espacios a las marcas < % - ahora ok.
               -* Al seleccionar una pregunta, aparece ok boton comentario, pero si lo pulso falla.
                    ruta: /quizes/1/comments/new (404 no encuentra). En routes/index.js puse comment en vez de comments. Corrigo. sigue ko.
                    Tambien puse router.get, en vez de post. reinicio y pruebo. No da error, pero no graba. reenvia ok a get quizes/(id)->show
                    Reviso bd con plugin de firefox sqlite manager, para ver si se grabaron los datos y no se muestran o no se grabaron
                    Estan grabados, incluso la prueba anterior, pero no se grabo el campo relacionado Comment.QuizId
                     En commentController .create build lo añadi como quizId. Como en models/comment.js no esta asignado con ningun nombre,
                     entiendo que se añade en models al hacer Comment.belongsTo(Quiz);Quiz.hasMany(Comment) (no se en cual)
                     cambio el nombre en build al que asigna automaticamente QuizId. reinicio
                     Ahora lo guarda ok en bd, pero sigue sin salir, reviso show.ejs. El fallo parece estar en quiz.Comments[]
                     quiz es el campo de tabla quiz, identificado por id, ok hasta aqui, pero se supone que tiene una propiedad Comments,
                     que es un array, y no la veo. Ese campo se carga con autoload. Reviso quiz_controller.js.
                     Parece que el fallo esta aqui: findById(quizId,{include:[{ model: models.Comment }]}). Añado un console.log en 
                      if (quiz), para ver como es el objeto pasado realmente
                    
               MMIIIIEERRRRRRRRRRRRRRRRDA??!!, NO SE QUE PASO, PERO NO SE CAMBIARON LAS MODIFICACIONES PARA EL AUTOLOAD.
               
               el .load si, pero los cambios en show y answer, no. Siguen cargando el archivo de la bd, en vez de a traves de autoload
               por eso en autoload el archivo esta ok, pero en la pagina no coincide.
               Intento modificar el commit antiguo, con checkout y commit --amend, pero al volver al commit actual no lo graba y me dice
               que si quiero grabar los datos (que ya borro, el muy...) que los pase a otro branch.
               Al carajo, lo modifico aqui y ya esta.
               
               - En local todo funciona ok. arreglo commits y paso a github  en rama master. despliego heroku, tambien ok. Sin borrar bd.

QUIZ 16 AUTENTIFICACION Y SESION
    Objetivo: Añadir gestion de sesion. 

        - Instalamos paquete express-session v1.11.3 con --save
        - Importamos a variable y activamos en app.js.  Tambien añado  parametro a
            cookie-parser/("rafaQuiz2015").
        - Añadimos en app.js el mw para que la sesion este activa en todas las rutas
            gestionadas por esta app y la direccion a la que vuelve despues del login
        - Añadimos variable sessionController, para conectar al archivo en carpeta 
            controller rutas a routes/index.js.Y cambiamos destruir sesion a DELETE, como se supone que deberia.
        - Creamos archivo en controllers/ session_controller.js y añadimos new y create
        - Creamos archivo en controllers/ user_controller.js con los datos
            de los usuarios y .autentificar